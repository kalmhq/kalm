version: 2.1
orbs:
  hello-orb: kalmhq-ns1/hello-orb@dev:0.0.1
  deploy-orb: kalmhq-ns1/deploy-orb@dev:0.0.3
jobs:
  test-dashboard:
    docker:
      - image: circleci/golang:1.15.2
    environment:
      KUBEBUILDER_ASSETS: /home/circleci/kubebuilder/bin
      GO111MODULE: "on"
    steps:
      - checkout
      - run:
          name: Install kubebuilder
          command: |
            os=$(go env GOOS)
            arch=$(go env GOARCH)
            echo $os $arch
            echo https://go.kubebuilder.io/dl/2.3.1/${os}/${arch}
            curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/
            sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} $HOME/kubebuilder
            export PATH=$PATH:$HOME/kubebuilder/bin
      - run:
          name: go get
          working_directory: ./api
          command: go get -d ./...
      - run:
          name: run test
          working_directory: ./api
          command: go test -coverprofile=coverage.txt -covermode=atomic -v ./...
      - run:
          name: upload coverage
          working_directory: ./api
          command: bash <(curl -s https://codecov.io/bash)
  build-push-dashboard-image:
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - checkout
      - run:
          name: Build & Push Docker image
          command: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            docker buildx create --name mybuilder --use

            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            docker buildx build \
              --progress plain \
              --output type=registry \
              --cache-from=type=registry,ref=kalmhq/kalm:cache \
              --cache-to=type=registry,ref=kalmhq/kalm:cache,mode=max \
              -t kalmhq/kalm:latest .
            
            # docker tag kalmhq/kalm:latest kalmhq/kalm:$CIRCLE_SHA1
            # docker push kalmhq/kalm:$CIRCLE_SHA1
            
            # if [ "$CIRCLE_TAG" != "" ]
            # then
            #   docker tag kalmhq/kalm:latest kalmhq/kalm:$CIRCLE_TAG
            #   docker push kalmhq/kalm:$CIRCLE_TAG
            # fi
  test-controller:
    docker:
      - image: circleci/golang:1.13.11
    environment:
      KUBEBUILDER_ASSETS: /home/circleci/kubebuilder/bin
      GO111MODULE: "on"
    steps:
      - checkout
      - run:
          name: Install kubebuilder
          command: |
            os=$(go env GOOS)
            arch=$(go env GOARCH)
            echo $os $arch
            echo https://go.kubebuilder.io/dl/2.3.1/${os}/${arch}
            curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/
            sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} $HOME/kubebuilder
            export PATH=$PATH:$HOME/kubebuilder/bin
      - run:
          name: go get
          working_directory: ./controller
          command: go get -d ./...
      - run:
          name: run test
          working_directory: ./controller
          command: make test
      - run:
          name: upload coverage
          working_directory: ./controller
          command: bash <(curl -s https://codecov.io/bash)
  build-push-controller-image:
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - checkout
      - run:
          name: Build & Push Controller image
          working_directory: ./controller
          command: |
            # enable buildx
            export DOCKER_CLI_EXPERIMENTAL=enabled
            # use driver: docker-container
            docker buildx create --name mybuilder --use

            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            docker buildx build \
              --output type=registry \
              --cache-from=type=registry,ref=kalmhq/kalm-controller:cache \
              --cache-to=type=registry,ref=kalmhq/kalm-controller:cache,mode=max \
              -t kalmhq/kalm-controller:latest .

            # echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            # docker push kalmhq/kalm-controller:latest
            # docker tag kalmhq/kalm-controller:latest kalmhq/kalm-controller:$CIRCLE_SHA1
            # docker push kalmhq/kalm-controller:$CIRCLE_SHA1
            # TAG=$(git tag --points-at HEAD)

            # if [ "$TAG" != "" ]
            # then
            #   docker tag kalmhq/kalm-controller:latest kalmhq/kalm-controller:$TAG
            #   docker push kalmhq/kalm-controller:$TAG
            # fi
  build-push-operator-image:
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - checkout
      - run:
          name: cp controller
          working_directory: ./operator
          command: cp -r ../controller .
      - run:
          name: Build & Publish Operator Image
          working_directory: ./operator
          command: |
            # enable buildx
            export DOCKER_CLI_EXPERIMENTAL=enabled
            # use driver: docker-container
            docker buildx create --name mybuilder --use

            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            docker buildx build \
              --output type=registry \
              --cache-from=type=registry,ref=kalmhq/kalm-operator:cache \
              --cache-to=type=registry,ref=kalmhq/kalm-operator:cache,mode=max \
              -t kalmhq/kalm-operator:latest .

            # docker tag kalmhq/kalm-operator:latest kalmhq/kalm-operator:$CIRCLE_SHA1
            # docker push kalmhq/kalm-operator:$CIRCLE_SHA1

            # TAG=$(git tag --points-at HEAD)
            # if [ "$TAG" != "" ]
            # then
            #   docker tag kalmhq/kalm-operator:latest kalmhq/kalm-operator:$TAG
            #   docker push kalmhq/kalm-operator:$TAG
            # fi
  deploy-dashboard:
    executor: deploy-orb/default
    steps:
      - deploy-orb/deploy:
          KALM_API_ADDRESS: https://dashboard.kapp.live
          KALM_DEPLOY_KEY: $DEPLOY_KEY
          KALM_APP: kalm-system
          KALM_COMPONENT: kalm
          KALM_COMPONENT_IMG_TAG: $CIRCLE_SHA1
  deploy-auth-proxy:
    executor: deploy-orb/default
    steps:
      - deploy-orb/deploy:
          KALM_API_ADDRESS: https://dashboard.kapp.live
          KALM_DEPLOY_KEY: $DEPLOY_KEY
          KALM_APP: kalm-system
          KALM_COMPONENT: auth-proxy
          KALM_COMPONENT_IMG_TAG: $CIRCLE_SHA1
  deploy-controller:
    docker:
      - image: circleci/golang:1.13.11
    steps:
      - checkout
      - run:
          name: deploy
          working_directory: ./controller
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.9/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            mkdir ${HOME}/.kube
            echo "$KUBE_CONFIG" | base64 --decode > ${HOME}/.kube/config
            IMG=kalmhq/kalm-controller:latest make deploy
            kubectl -n kalm-system patch deployment kalm-controller -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
  deploy-operator:
    docker:
      - image: circleci/golang:1.13.11
    steps:
      - checkout
      - run:
          name: deploy
          working_directory: ./operator
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.9/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            mkdir ${HOME}/.kube
            echo "$KUBE_CONFIG" | base64 --decode > ${HOME}/.kube/config
            IMG=kalmhq/kalm-operator:latest make deploy
            kubectl -n kalm-operator patch deployment kalm-operator -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
workflows:
  version: 2
  dashboard:
    jobs:
      - test-dashboard:
          filters:
            tags:
              only: /^v.*/
      - hold:
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          filters:
            branches:
              ignore: master
      - build-push-dashboard-image:
          name: manual-build-push-dashboard-image
          context: kalm-ci
          requires:
            - hold
      - build-push-dashboard-image:
          context: kalm-ci
          requires:
            - test-dashboard
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v.*/
      - deploy-dashboard:
          context: deploy-demo-cluster
          requires:
            - build-push-dashboard-image
          filters:
            branches:
              only:
                - master
      - deploy-auth-proxy:
          context: deploy-demo-cluster
          requires:
            - build-push-dashboard-image
          filters:
            branches:
              only:
                - master
  controller:
    jobs:
      - test-controller:
          filters:
            tags:
              only: /^v.*/
      - hold:
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          filters:
            branches:
              ignore: master
      - build-push-controller-image:
          name: manual-build-push-controller-image
          context: kalm-ci
          requires:
            - hold
      - build-push-controller-image:
          context: kalm-ci
          requires:
            - test-controller
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v.*/
      - deploy-controller:
          context: deploy-demo-cluster
          requires:
            - build-push-controller-image
          filters:
            branches:
              only: master
  operator:
    jobs:
      - build-push-operator-image:
          context: kalm-ci
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v.*/
      - hold:
          type: approval
          filters:
            branches:
              ignore: master
      - build-push-operator-image:
          name: manual-build-push-operator-image
          context: kalm-ci
          requires:
            - hold
      - deploy-operator:
          context: deploy-demo-cluster
          requires:
            - build-push-operator-image
          filters:
            branches:
              only: master
