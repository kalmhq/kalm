version: 2.1
jobs:
  test-dashboard:
    docker:
      - image: circleci/golang:1.15.2
    environment:
      KUBEBUILDER_ASSETS: /home/circleci/kubebuilder/bin
      GO111MODULE: "on"
    steps:
      - checkout
      - run:
          name: Install kubebuilder
          command: |
            os=$(go env GOOS)
            arch=$(go env GOARCH)
            echo $os $arch
            echo https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_${os}_${arch}.tar.gz
            curl -fsL "https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_${os}_${arch}.tar.gz" -o kubebuilder-tools
            tar -zvxf kubebuilder-tools
            sudo mv kubebuilder_2.3.1_${os}_${arch}/ $HOME/kubebuilder/
            ls -al $HOME/kubebuilder/
            export PATH=$PATH:$HOME/kubebuilder/bin
      - run:
          name: go get
          working_directory: ./api
          command: go get -d ./...
      - run:
          name: run test
          working_directory: ./api
          command: go test -coverprofile=coverage.txt -covermode=atomic -v ./...
      - run:
          name: upload coverage
          working_directory: ./api
          command: bash <(curl -s https://codecov.io/bash)
  test-controller:
    docker:
      - image: circleci/golang:1.13.11
    environment:
      KUBEBUILDER_ASSETS: /home/circleci/kubebuilder/bin
      GO111MODULE: "on"
    steps:
      - checkout
      - run:
          name: Install kubebuilder
          command: |
            os=$(go env GOOS)
            arch=$(go env GOARCH)
            echo $os $arch
            echo https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_${os}_${arch}.tar.gz
            curl -fsL "https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_${os}_${arch}.tar.gz" -o kubebuilder-tools
            tar -zvxf kubebuilder-tools
            sudo mv kubebuilder_2.3.1_${os}_${arch}/ $HOME/kubebuilder/
            ls -al $HOME/kubebuilder/
            export PATH=$PATH:$HOME/kubebuilder/bin
      - run:
          name: go get
          working_directory: ./controller
          command: go get -d ./...
      - run:
          name: run test
          working_directory: ./controller
          command: make test
      - run:
          name: upload coverage
          working_directory: ./controller
          command: bash <(curl -s https://codecov.io/bash)
  build-push-dashboard-image:
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - checkout
      - run:
          name: Build & Push Docker image
          command: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            docker buildx create --buildkitd-flags '--debug' --name mybuilder --use

            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            if [ $CIRCLE_BRANCH = "master" ]
            then
              KALM_BUILD_ENV_GIT_COMMIT=$CIRCLE_SHA1
              KALM_BUILD_ENV_GIT_VERSION=$CIRCLE_TAG
            fi

            docker buildx build \
              --output=type=docker \
              --build-arg KALM_BUILD_ENV_GIT_COMMIT=$KALM_BUILD_ENV_GIT_COMMIT \
              --build-arg KALM_BUILD_ENV_GIT_VERSION=$KALM_BUILD_ENV_GIT_VERSION \
              -t ialaddin/kalm:latest .
              # --cache-from=type=registry,ref=ialaddin/kalm:$CIRCLE_BRANCH-cache \
              # --cache-to=type=registry,ref=ialaddin/kalm:$CIRCLE_BRANCH-cache,mode=max \
              

            docker tag ialaddin/kalm:latest ialaddin/kalm:$CIRCLE_SHA1
            docker push ialaddin/kalm:latest
            docker push ialaddin/kalm:$CIRCLE_SHA1

            if [ "$CIRCLE_TAG" != "" ]
            then
              docker tag ialaddin/kalm:latest ialaddin/kalm:$CIRCLE_TAG
              docker push ialaddin/kalm:$CIRCLE_TAG
            fi
  build-push-controller-image:
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - checkout
      - run:
          name: Build & Push Controller image
          working_directory: ./controller
          command: |
            # enable buildx
            export DOCKER_CLI_EXPERIMENTAL=enabled
            # use driver: docker-container
            docker buildx create --name mybuilder --use

            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            docker buildx build \
              --output=type=docker \
              -t ialaddin/kalm-controller:latest .
              # --cache-from=type=registry,ref=ialaddin/kalm-controller:$CIRCLE_BRANCH-cache \
              # --cache-to=type=registry,ref=ialaddin/kalm-controller:$CIRCLE_BRANCH-cache,mode=max \
              

            docker tag  ialaddin/kalm-controller:latest ialaddin/kalm-controller:$CIRCLE_SHA1
            docker push ialaddin/kalm-controller:latest
            docker push ialaddin/kalm-controller:$CIRCLE_SHA1

            if [ "$CIRCLE_TAG" != "" ]
            then
              docker tag ialaddin/kalm-controller:latest ialaddin/kalm-controller:$CIRCLE_TAG
              docker push ialaddin/kalm-controller:$CIRCLE_TAG
            fi
  build-push-operator-image:
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - checkout
      - run:
          name: cp controller
          working_directory: ./operator
          command: cp -r ../controller .
      - run:
          name: Build & Publish Operator Image
          working_directory: ./operator
          command: |
            # enable buildx
            export DOCKER_CLI_EXPERIMENTAL=enabled
            # use driver: docker-container
            docker buildx create --buildkitd-flags '--debug' --name mybuilder --use

            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            docker buildx build \
              --output=type=docker \
              -t ialaddin/kalm-operator:latest .
              
              # --cache-from=type=registry,ref=ialaddin/kalm-operator:$CIRCLE_BRANCH-cache \
              # --cache-to=type=registry,ref=ialaddin/kalm-operator:$CIRCLE_BRANCH-cache,mode=max \
              

            docker tag  ialaddin/kalm-operator:latest ialaddin/kalm-operator:$CIRCLE_SHA1
            docker push ialaddin/kalm-operator:latest
            docker push ialaddin/kalm-operator:$CIRCLE_SHA1

            if [ "$CIRCLE_TAG" != "" ]
            then
              docker tag ialaddin/kalm-operator:latest ialaddin/kalm-operator:$CIRCLE_TAG
              docker push ialaddin/kalm-operator:$CIRCLE_TAG
            fi
  # deploy-dashboard:
  #   executor: deploy-orb/default
  #   steps:
  #     - deploy-orb/deploy:
  #         KALM_API_ADDRESS: https://dashboard.kapp.live
  #         KALM_DEPLOY_KEY: $DEPLOY_KEY
  #         KALM_APP: kalm-system
  #         KALM_COMPONENT: kalm
  #         KALM_COMPONENT_IMG_TAG: $CIRCLE_SHA1
  # deploy-auth-proxy:
  #   executor: deploy-orb/default
  #   steps:
  #     - deploy-orb/deploy:
  #         KALM_API_ADDRESS: https://dashboard.kapp.live
  #         KALM_DEPLOY_KEY: $DEPLOY_KEY
  #         KALM_APP: kalm-system
  #         KALM_COMPONENT: auth-proxy
  #         KALM_COMPONENT_IMG_TAG: $CIRCLE_SHA1
  # deploy-controller:
  #   docker:
  #     - image: circleci/golang:1.13.11
  #   steps:
  #     - checkout
  #     - run:
  #         name: deploy
  #         working_directory: ./controller
  #         command: |
  #           curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.9/bin/linux/amd64/kubectl
  #           chmod +x ./kubectl
  #           sudo mv ./kubectl /usr/local/bin/kubectl
  #           mkdir ${HOME}/.kube
  #           echo "$KUBE_CONFIG" | base64 --decode > ${HOME}/.kube/config
  #           IMG=ialaddin/kalm-controller:latest make deploy
  #           kubectl -n kalm-system patch deployment kalm-controller -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
  # deploy-operator:
  #   docker:
  #     - image: circleci/golang:1.13.11
  #   steps:
  #     - checkout
  #     - run:
  #         name: deploy
  #         working_directory: ./operator
  #         command: |
  #           curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.9/bin/linux/amd64/kubectl
  #           chmod +x ./kubectl
  #           sudo mv ./kubectl /usr/local/bin/kubectl
  #           mkdir ${HOME}/.kube
  #           echo "$KUBE_CONFIG" | base64 --decode > ${HOME}/.kube/config
  #           IMG=ialaddin/kalm-operator:latest make deploy
  #           kubectl -n kalm-operator patch deployment kalm-operator -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
workflows:
  version: 2
  dashboard:
    jobs:
      - test-dashboard:
          filters:
            tags:
              only: /^v.*/
      - hold:
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          filters:
            branches:
              ignore: master
      - build-push-dashboard-image:
          name: manual-build-push-dashboard-image
          context: kalm
          requires:
            - hold
      - build-push-dashboard-image:
          context: kalm
          requires:
            - test-dashboard
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v.*/
      # - deploy-dashboard:
      #     context: deploy-demo-cluster
      #     requires:
      #       - build-push-dashboard-image
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - deploy-auth-proxy:
      #     context: deploy-demo-cluster
      #     requires:
      #       - build-push-dashboard-image
      #     filters:
      #       branches:
      #         only:
      #           - master
  controller:
    jobs:
      - test-controller:
          filters:
            tags:
              only: /^v.*/
      - hold:
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          filters:
            branches:
              ignore: master
      - build-push-controller-image:
          name: manual-build-push-controller-image
          context: kalm
          requires:
            - hold
      - build-push-controller-image:
          context: kalm
          requires:
            - test-controller
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v.*/
      # - deploy-controller:
      #     context: deploy-demo-cluster
      #     requires:
      #       - build-push-controller-image
      #     filters:
      #       branches:
      #         only: master
  operator:
    jobs:
      - build-push-operator-image:
          context: kalm
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v.*/
      - hold:
          type: approval
          filters:
            branches:
              ignore: master
      - build-push-operator-image:
          name: manual-build-push-operator-image
          context: kalm
          requires:
            - hold
      # - deploy-operator:
      #     context: deploy-demo-cluster
      #     requires:
      #       - build-push-operator-image
      #     filters:
      #       branches:
      #         only: master
